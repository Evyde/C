                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Apr 25 2013) (Linux)
                              4 ; This file was generated Thu Dec 25 21:00:25 2014
                              5 ;--------------------------------------------------------
                              6 	.module new
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _right
                             14 	.globl _left
                             15 	.globl _delay
                             16 	.globl _TF2
                             17 	.globl _EXF2
                             18 	.globl _RCLK
                             19 	.globl _TCLK
                             20 	.globl _EXEN2
                             21 	.globl _TR2
                             22 	.globl _C_T2
                             23 	.globl _CP_RL2
                             24 	.globl _T2CON_7
                             25 	.globl _T2CON_6
                             26 	.globl _T2CON_5
                             27 	.globl _T2CON_4
                             28 	.globl _T2CON_3
                             29 	.globl _T2CON_2
                             30 	.globl _T2CON_1
                             31 	.globl _T2CON_0
                             32 	.globl _PT2
                             33 	.globl _ET2
                             34 	.globl _CY
                             35 	.globl _AC
                             36 	.globl _F0
                             37 	.globl _RS1
                             38 	.globl _RS0
                             39 	.globl _OV
                             40 	.globl _F1
                             41 	.globl _P
                             42 	.globl _PS
                             43 	.globl _PT1
                             44 	.globl _PX1
                             45 	.globl _PT0
                             46 	.globl _PX0
                             47 	.globl _RD
                             48 	.globl _WR
                             49 	.globl _T1
                             50 	.globl _T0
                             51 	.globl _INT1
                             52 	.globl _INT0
                             53 	.globl _TXD
                             54 	.globl _RXD
                             55 	.globl _P3_7
                             56 	.globl _P3_6
                             57 	.globl _P3_5
                             58 	.globl _P3_4
                             59 	.globl _P3_3
                             60 	.globl _P3_2
                             61 	.globl _P3_1
                             62 	.globl _P3_0
                             63 	.globl _EA
                             64 	.globl _ES
                             65 	.globl _ET1
                             66 	.globl _EX1
                             67 	.globl _ET0
                             68 	.globl _EX0
                             69 	.globl _P2_7
                             70 	.globl _P2_6
                             71 	.globl _P2_5
                             72 	.globl _P2_4
                             73 	.globl _P2_3
                             74 	.globl _P2_2
                             75 	.globl _P2_1
                             76 	.globl _P2_0
                             77 	.globl _SM0
                             78 	.globl _SM1
                             79 	.globl _SM2
                             80 	.globl _REN
                             81 	.globl _TB8
                             82 	.globl _RB8
                             83 	.globl _TI
                             84 	.globl _RI
                             85 	.globl _P1_7
                             86 	.globl _P1_6
                             87 	.globl _P1_5
                             88 	.globl _P1_4
                             89 	.globl _P1_3
                             90 	.globl _P1_2
                             91 	.globl _P1_1
                             92 	.globl _P1_0
                             93 	.globl _TF1
                             94 	.globl _TR1
                             95 	.globl _TF0
                             96 	.globl _TR0
                             97 	.globl _IE1
                             98 	.globl _IT1
                             99 	.globl _IE0
                            100 	.globl _IT0
                            101 	.globl _P0_7
                            102 	.globl _P0_6
                            103 	.globl _P0_5
                            104 	.globl _P0_4
                            105 	.globl _P0_3
                            106 	.globl _P0_2
                            107 	.globl _P0_1
                            108 	.globl _P0_0
                            109 	.globl _TH2
                            110 	.globl _TL2
                            111 	.globl _RCAP2H
                            112 	.globl _RCAP2L
                            113 	.globl _T2CON
                            114 	.globl _B
                            115 	.globl _ACC
                            116 	.globl _PSW
                            117 	.globl _IP
                            118 	.globl _P3
                            119 	.globl _IE
                            120 	.globl _P2
                            121 	.globl _SBUF
                            122 	.globl _SCON
                            123 	.globl _P1
                            124 	.globl _TH1
                            125 	.globl _TH0
                            126 	.globl _TL1
                            127 	.globl _TL0
                            128 	.globl _TMOD
                            129 	.globl _TCON
                            130 	.globl _PCON
                            131 	.globl _DPH
                            132 	.globl _DPL
                            133 	.globl _SP
                            134 	.globl _P0
                            135 ;--------------------------------------------------------
                            136 ; special function registers
                            137 ;--------------------------------------------------------
                            138 	.area RSEG    (ABS,DATA)
   0000                     139 	.org 0x0000
                    0080    140 _P0	=	0x0080
                    0081    141 _SP	=	0x0081
                    0082    142 _DPL	=	0x0082
                    0083    143 _DPH	=	0x0083
                    0087    144 _PCON	=	0x0087
                    0088    145 _TCON	=	0x0088
                    0089    146 _TMOD	=	0x0089
                    008A    147 _TL0	=	0x008a
                    008B    148 _TL1	=	0x008b
                    008C    149 _TH0	=	0x008c
                    008D    150 _TH1	=	0x008d
                    0090    151 _P1	=	0x0090
                    0098    152 _SCON	=	0x0098
                    0099    153 _SBUF	=	0x0099
                    00A0    154 _P2	=	0x00a0
                    00A8    155 _IE	=	0x00a8
                    00B0    156 _P3	=	0x00b0
                    00B8    157 _IP	=	0x00b8
                    00D0    158 _PSW	=	0x00d0
                    00E0    159 _ACC	=	0x00e0
                    00F0    160 _B	=	0x00f0
                    00C8    161 _T2CON	=	0x00c8
                    00CA    162 _RCAP2L	=	0x00ca
                    00CB    163 _RCAP2H	=	0x00cb
                    00CC    164 _TL2	=	0x00cc
                    00CD    165 _TH2	=	0x00cd
                            166 ;--------------------------------------------------------
                            167 ; special function bits
                            168 ;--------------------------------------------------------
                            169 	.area RSEG    (ABS,DATA)
   0000                     170 	.org 0x0000
                    0080    171 _P0_0	=	0x0080
                    0081    172 _P0_1	=	0x0081
                    0082    173 _P0_2	=	0x0082
                    0083    174 _P0_3	=	0x0083
                    0084    175 _P0_4	=	0x0084
                    0085    176 _P0_5	=	0x0085
                    0086    177 _P0_6	=	0x0086
                    0087    178 _P0_7	=	0x0087
                    0088    179 _IT0	=	0x0088
                    0089    180 _IE0	=	0x0089
                    008A    181 _IT1	=	0x008a
                    008B    182 _IE1	=	0x008b
                    008C    183 _TR0	=	0x008c
                    008D    184 _TF0	=	0x008d
                    008E    185 _TR1	=	0x008e
                    008F    186 _TF1	=	0x008f
                    0090    187 _P1_0	=	0x0090
                    0091    188 _P1_1	=	0x0091
                    0092    189 _P1_2	=	0x0092
                    0093    190 _P1_3	=	0x0093
                    0094    191 _P1_4	=	0x0094
                    0095    192 _P1_5	=	0x0095
                    0096    193 _P1_6	=	0x0096
                    0097    194 _P1_7	=	0x0097
                    0098    195 _RI	=	0x0098
                    0099    196 _TI	=	0x0099
                    009A    197 _RB8	=	0x009a
                    009B    198 _TB8	=	0x009b
                    009C    199 _REN	=	0x009c
                    009D    200 _SM2	=	0x009d
                    009E    201 _SM1	=	0x009e
                    009F    202 _SM0	=	0x009f
                    00A0    203 _P2_0	=	0x00a0
                    00A1    204 _P2_1	=	0x00a1
                    00A2    205 _P2_2	=	0x00a2
                    00A3    206 _P2_3	=	0x00a3
                    00A4    207 _P2_4	=	0x00a4
                    00A5    208 _P2_5	=	0x00a5
                    00A6    209 _P2_6	=	0x00a6
                    00A7    210 _P2_7	=	0x00a7
                    00A8    211 _EX0	=	0x00a8
                    00A9    212 _ET0	=	0x00a9
                    00AA    213 _EX1	=	0x00aa
                    00AB    214 _ET1	=	0x00ab
                    00AC    215 _ES	=	0x00ac
                    00AF    216 _EA	=	0x00af
                    00B0    217 _P3_0	=	0x00b0
                    00B1    218 _P3_1	=	0x00b1
                    00B2    219 _P3_2	=	0x00b2
                    00B3    220 _P3_3	=	0x00b3
                    00B4    221 _P3_4	=	0x00b4
                    00B5    222 _P3_5	=	0x00b5
                    00B6    223 _P3_6	=	0x00b6
                    00B7    224 _P3_7	=	0x00b7
                    00B0    225 _RXD	=	0x00b0
                    00B1    226 _TXD	=	0x00b1
                    00B2    227 _INT0	=	0x00b2
                    00B3    228 _INT1	=	0x00b3
                    00B4    229 _T0	=	0x00b4
                    00B5    230 _T1	=	0x00b5
                    00B6    231 _WR	=	0x00b6
                    00B7    232 _RD	=	0x00b7
                    00B8    233 _PX0	=	0x00b8
                    00B9    234 _PT0	=	0x00b9
                    00BA    235 _PX1	=	0x00ba
                    00BB    236 _PT1	=	0x00bb
                    00BC    237 _PS	=	0x00bc
                    00D0    238 _P	=	0x00d0
                    00D1    239 _F1	=	0x00d1
                    00D2    240 _OV	=	0x00d2
                    00D3    241 _RS0	=	0x00d3
                    00D4    242 _RS1	=	0x00d4
                    00D5    243 _F0	=	0x00d5
                    00D6    244 _AC	=	0x00d6
                    00D7    245 _CY	=	0x00d7
                    00AD    246 _ET2	=	0x00ad
                    00BD    247 _PT2	=	0x00bd
                    00C8    248 _T2CON_0	=	0x00c8
                    00C9    249 _T2CON_1	=	0x00c9
                    00CA    250 _T2CON_2	=	0x00ca
                    00CB    251 _T2CON_3	=	0x00cb
                    00CC    252 _T2CON_4	=	0x00cc
                    00CD    253 _T2CON_5	=	0x00cd
                    00CE    254 _T2CON_6	=	0x00ce
                    00CF    255 _T2CON_7	=	0x00cf
                    00C8    256 _CP_RL2	=	0x00c8
                    00C9    257 _C_T2	=	0x00c9
                    00CA    258 _TR2	=	0x00ca
                    00CB    259 _EXEN2	=	0x00cb
                    00CC    260 _TCLK	=	0x00cc
                    00CD    261 _RCLK	=	0x00cd
                    00CE    262 _EXF2	=	0x00ce
                    00CF    263 _TF2	=	0x00cf
                            264 ;--------------------------------------------------------
                            265 ; overlayable register banks
                            266 ;--------------------------------------------------------
                            267 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     268 	.ds 8
                            269 ;--------------------------------------------------------
                            270 ; internal ram data
                            271 ;--------------------------------------------------------
                            272 	.area DSEG    (DATA)
                            273 ;--------------------------------------------------------
                            274 ; overlayable items in internal ram 
                            275 ;--------------------------------------------------------
                            276 	.area	OSEG    (OVR,DATA)
                            277 ;--------------------------------------------------------
                            278 ; Stack segment in internal ram 
                            279 ;--------------------------------------------------------
                            280 	.area	SSEG	(DATA)
   0000                     281 __start__stack:
   0000                     282 	.ds	1
                            283 
                            284 ;--------------------------------------------------------
                            285 ; indirectly addressable internal ram data
                            286 ;--------------------------------------------------------
                            287 	.area ISEG    (DATA)
                            288 ;--------------------------------------------------------
                            289 ; absolute internal ram data
                            290 ;--------------------------------------------------------
                            291 	.area IABS    (ABS,DATA)
                            292 	.area IABS    (ABS,DATA)
                            293 ;--------------------------------------------------------
                            294 ; bit data
                            295 ;--------------------------------------------------------
                            296 	.area BSEG    (BIT)
                            297 ;--------------------------------------------------------
                            298 ; paged external ram data
                            299 ;--------------------------------------------------------
                            300 	.area PSEG    (PAG,XDATA)
                            301 ;--------------------------------------------------------
                            302 ; external ram data
                            303 ;--------------------------------------------------------
                            304 	.area XSEG    (XDATA)
                            305 ;--------------------------------------------------------
                            306 ; absolute external ram data
                            307 ;--------------------------------------------------------
                            308 	.area XABS    (ABS,XDATA)
                            309 ;--------------------------------------------------------
                            310 ; external initialized ram data
                            311 ;--------------------------------------------------------
                            312 	.area XISEG   (XDATA)
                            313 	.area HOME    (CODE)
                            314 	.area GSINIT0 (CODE)
                            315 	.area GSINIT1 (CODE)
                            316 	.area GSINIT2 (CODE)
                            317 	.area GSINIT3 (CODE)
                            318 	.area GSINIT4 (CODE)
                            319 	.area GSINIT5 (CODE)
                            320 	.area GSINIT  (CODE)
                            321 	.area GSFINAL (CODE)
                            322 	.area CSEG    (CODE)
                            323 ;--------------------------------------------------------
                            324 ; interrupt vector 
                            325 ;--------------------------------------------------------
                            326 	.area HOME    (CODE)
   0000                     327 __interrupt_vect:
   0000 02s00r00            328 	ljmp	__sdcc_gsinit_startup
                            329 ;--------------------------------------------------------
                            330 ; global & static initialisations
                            331 ;--------------------------------------------------------
                            332 	.area HOME    (CODE)
                            333 	.area GSINIT  (CODE)
                            334 	.area GSFINAL (CODE)
                            335 	.area GSINIT  (CODE)
                            336 	.globl __sdcc_gsinit_startup
                            337 	.globl __sdcc_program_startup
                            338 	.globl __start__stack
                            339 	.globl __mcs51_genXINIT
                            340 	.globl __mcs51_genXRAMCLEAR
                            341 	.globl __mcs51_genRAMCLEAR
                            342 	.area GSFINAL (CODE)
   0000 02s00r03            343 	ljmp	__sdcc_program_startup
                            344 ;--------------------------------------------------------
                            345 ; Home
                            346 ;--------------------------------------------------------
                            347 	.area HOME    (CODE)
                            348 	.area HOME    (CODE)
   0003                     349 __sdcc_program_startup:
   0003 12s00r98            350 	lcall	_main
                            351 ;	return from main will lock up
   0006 80 FE               352 	sjmp .
                            353 ;--------------------------------------------------------
                            354 ; code
                            355 ;--------------------------------------------------------
                            356 	.area CSEG    (CODE)
                            357 ;------------------------------------------------------------
                            358 ;Allocation info for local variables in function 'delay'
                            359 ;------------------------------------------------------------
                            360 ;ms                        Allocated to registers r6 r7 
                            361 ;j                         Allocated to registers r5 
                            362 ;------------------------------------------------------------
                            363 ;	hf.h:4: int delay(int ms)
                            364 ;	-----------------------------------------
                            365 ;	 function delay
                            366 ;	-----------------------------------------
   0000                     367 _delay:
                    0007    368 	ar7 = 0x07
                    0006    369 	ar6 = 0x06
                    0005    370 	ar5 = 0x05
                    0004    371 	ar4 = 0x04
                    0003    372 	ar3 = 0x03
                    0002    373 	ar2 = 0x02
                    0001    374 	ar1 = 0x01
                    0000    375 	ar0 = 0x00
   0000 AE 82               376 	mov	r6,dpl
   0002 AF 83               377 	mov	r7,dph
                            378 ;	hf.h:9: return 0;
   0004                     379 00105$:
                            380 ;	hf.h:7: for(;ms!=0;ms--)
   0004 BE 00 05            381 	cjne	r6,#0x00,00120$
   0007 BF 00 02            382 	cjne	r7,#0x00,00120$
   000A 80 18               383 	sjmp	00108$
   000C                     384 00120$:
                            385 ;	hf.h:8: for(j=98;j>0;j--);
   000C 7D 62               386 	mov	r5,#0x62
   000E                     387 00101$:
   000E ED                  388 	mov	a,r5
   000F 60 04               389 	jz	00111$
   0011 7C 01               390 	mov	r4,#0x01
   0013 80 02               391 	sjmp	00112$
   0015                     392 00111$:
   0015 7C 00               393 	mov	r4,#0x00
   0017                     394 00112$:
   0017 EC                  395 	mov	a,r4
   0018 60 03               396 	jz	00107$
   001A 1D                  397 	dec	r5
   001B 80 F1               398 	sjmp	00101$
   001D                     399 00107$:
                            400 ;	hf.h:7: for(;ms!=0;ms--)
   001D 1E                  401 	dec	r6
   001E BE FF 01            402 	cjne	r6,#0xFF,00123$
   0021 1F                  403 	dec	r7
   0022                     404 00123$:
   0022 80 E0               405 	sjmp	00105$
   0024                     406 00108$:
                            407 ;	hf.h:9: return 0;
   0024 90 00 00            408 	mov	dptr,#0x0000
   0027 22                  409 	ret
                            410 ;------------------------------------------------------------
                            411 ;Allocation info for local variables in function 'left'
                            412 ;------------------------------------------------------------
                            413 ;i                         Allocated to registers r6 r7 
                            414 ;------------------------------------------------------------
                            415 ;	new.c:7: int left(int i)
                            416 ;	-----------------------------------------
                            417 ;	 function left
                            418 ;	-----------------------------------------
   0028                     419 _left:
   0028 AE 82               420 	mov	r6,dpl
   002A AF 83               421 	mov	r7,dph
                            422 ;	new.c:16: return i;
   002C                     423 00104$:
                            424 ;	new.c:9: for(;i<0x80;)
   002C C3                  425 	clr	c
   002D EE                  426 	mov	a,r6
   002E 94 80               427 	subb	a,#0x80
   0030 EF                  428 	mov	a,r7
   0031 64 80               429 	xrl	a,#0x80
   0033 94 80               430 	subb	a,#0x80
   0035 50 26               431 	jnc	00106$
                            432 ;	new.c:11: D3=~i;
   0037 8E 05               433 	mov	ar5,r6
   0039 ED                  434 	mov	a,r5
   003A F4                  435 	cpl	a
   003B FD                  436 	mov	r5,a
   003C 8D A0               437 	mov	_P2,r5
                            438 ;	new.c:12: i=i<<1;
   003E EF                  439 	mov	a,r7
   003F CE                  440 	xch	a,r6
   0040 25 E0               441 	add	a,acc
   0042 CE                  442 	xch	a,r6
   0043 33                  443 	rlc	a
   0044 FF                  444 	mov	r7,a
                            445 ;	new.c:13: if(i==1) ;
   0045 BE 01 05            446 	cjne	r6,#0x01,00113$
   0048 BF 00 02            447 	cjne	r7,#0x00,00113$
   004B 80 DF               448 	sjmp	00104$
   004D                     449 00113$:
                            450 ;	new.c:14: else delay(100);
   004D 90 00 64            451 	mov	dptr,#0x0064
   0050 C0 07               452 	push	ar7
   0052 C0 06               453 	push	ar6
   0054 12s00r00            454 	lcall	_delay
   0057 D0 06               455 	pop	ar6
   0059 D0 07               456 	pop	ar7
   005B 80 CF               457 	sjmp	00104$
   005D                     458 00106$:
                            459 ;	new.c:16: return i;
   005D 8E 82               460 	mov	dpl,r6
   005F 8F 83               461 	mov	dph,r7
   0061 22                  462 	ret
                            463 ;------------------------------------------------------------
                            464 ;Allocation info for local variables in function 'right'
                            465 ;------------------------------------------------------------
                            466 ;i                         Allocated to registers r6 r7 
                            467 ;------------------------------------------------------------
                            468 ;	new.c:19: int right(int i)
                            469 ;	-----------------------------------------
                            470 ;	 function right
                            471 ;	-----------------------------------------
   0062                     472 _right:
   0062 AE 82               473 	mov	r6,dpl
   0064 AF 83               474 	mov	r7,dph
                            475 ;	new.c:28: return i;
   0066                     476 00104$:
                            477 ;	new.c:21: for(;i>=1;)
   0066 C3                  478 	clr	c
   0067 EE                  479 	mov	a,r6
   0068 94 01               480 	subb	a,#0x01
   006A EF                  481 	mov	a,r7
   006B 64 80               482 	xrl	a,#0x80
   006D 94 80               483 	subb	a,#0x80
   006F 40 22               484 	jc	00106$
                            485 ;	new.c:23: D3=~i;
   0071 8E 05               486 	mov	ar5,r6
   0073 ED                  487 	mov	a,r5
   0074 F4                  488 	cpl	a
   0075 FD                  489 	mov	r5,a
   0076 8D A0               490 	mov	_P2,r5
                            491 ;	new.c:24: i=i>>1;
   0078 EF                  492 	mov	a,r7
   0079 A2 E7               493 	mov	c,acc.7
   007B 13                  494 	rrc	a
   007C CE                  495 	xch	a,r6
   007D 13                  496 	rrc	a
   007E CE                  497 	xch	a,r6
                            498 ;	new.c:25: if(i==0) ;
   007F FF                  499 	mov	r7,a
   0080 4E                  500 	orl	a,r6
   0081 60 E3               501 	jz	00104$
                            502 ;	new.c:26: else delay(100);
   0083 90 00 64            503 	mov	dptr,#0x0064
   0086 C0 07               504 	push	ar7
   0088 C0 06               505 	push	ar6
   008A 12s00r00            506 	lcall	_delay
   008D D0 06               507 	pop	ar6
   008F D0 07               508 	pop	ar7
   0091 80 D3               509 	sjmp	00104$
   0093                     510 00106$:
                            511 ;	new.c:28: return i;
   0093 8E 82               512 	mov	dpl,r6
   0095 8F 83               513 	mov	dph,r7
   0097 22                  514 	ret
                            515 ;------------------------------------------------------------
                            516 ;Allocation info for local variables in function 'main'
                            517 ;------------------------------------------------------------
                            518 ;i                         Allocated to registers r6 r7 
                            519 ;------------------------------------------------------------
                            520 ;	new.c:32: void main(void)
                            521 ;	-----------------------------------------
                            522 ;	 function main
                            523 ;	-----------------------------------------
   0098                     524 _main:
                            525 ;	new.c:34: int i=1;
   0098 7E 01               526 	mov	r6,#0x01
   009A 7F 00               527 	mov	r7,#0x00
                            528 ;	new.c:35: while(1)
   009C                     529 00104$:
                            530 ;	new.c:37: if(i==0) i=1;
   009C EE                  531 	mov	a,r6
   009D 4F                  532 	orl	a,r7
   009E 70 03               533 	jnz	00102$
   00A0 7E 01               534 	mov	r6,#0x01
   00A2 FF                  535 	mov	r7,a
   00A3                     536 00102$:
                            537 ;	new.c:38: i=left(i);
   00A3 8E 82               538 	mov	dpl,r6
   00A5 8F 83               539 	mov	dph,r7
   00A7 12s00r28            540 	lcall	_left
                            541 ;	new.c:39: i=right(i);		
   00AA 12s00r62            542 	lcall	_right
   00AD AE 82               543 	mov	r6,dpl
   00AF AF 83               544 	mov	r7,dph
   00B1 80 E9               545 	sjmp	00104$
                            546 	.area CSEG    (CODE)
                            547 	.area CONST   (CODE)
                            548 	.area XINIT   (CODE)
                            549 	.area CABS    (ABS,CODE)
